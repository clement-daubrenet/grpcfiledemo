// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: route_guide.proto
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_route_5fguide_2eproto__INCLUDED
#define GRPC_route_5fguide_2eproto__INCLUDED

#include "route_guide.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace grpcfiledemo {

// Interface exported by the server.
class RouteGuide final {
 public:
  static constexpr char const* service_full_name() {
    return "grpcfiledemo.RouteGuide";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // A simple RPC.
    //
    // Obtains the feature at a given position.
    //
    // A feature with an empty name is returned if there's no feature at the given
    // position.
    virtual ::grpc::Status GetFeature(::grpc::ClientContext* context, const ::grpcfiledemo::Point& request, ::grpcfiledemo::Feature* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcfiledemo::Feature>> AsyncGetFeature(::grpc::ClientContext* context, const ::grpcfiledemo::Point& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcfiledemo::Feature>>(AsyncGetFeatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcfiledemo::Feature>> PrepareAsyncGetFeature(::grpc::ClientContext* context, const ::grpcfiledemo::Point& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcfiledemo::Feature>>(PrepareAsyncGetFeatureRaw(context, request, cq));
    }
    // A server-to-client streaming RPC.
    //
    // Obtains the Features available within the given Rectangle.  Results are
    // streamed rather than returned at once (e.g. in a response message with a
    // repeated field), as the rectangle may cover a large area and contain a
    // huge number of features.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::grpcfiledemo::Feature>> ListFeatures(::grpc::ClientContext* context, const ::grpcfiledemo::Rectangle& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::grpcfiledemo::Feature>>(ListFeaturesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::grpcfiledemo::Feature>> AsyncListFeatures(::grpc::ClientContext* context, const ::grpcfiledemo::Rectangle& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::grpcfiledemo::Feature>>(AsyncListFeaturesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::grpcfiledemo::Feature>> PrepareAsyncListFeatures(::grpc::ClientContext* context, const ::grpcfiledemo::Rectangle& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::grpcfiledemo::Feature>>(PrepareAsyncListFeaturesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::grpcfiledemo::Content>> ListChunks(::grpc::ClientContext* context, const ::grpcfiledemo::Content& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::grpcfiledemo::Content>>(ListChunksRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::grpcfiledemo::Content>> AsyncListChunks(::grpc::ClientContext* context, const ::grpcfiledemo::Content& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::grpcfiledemo::Content>>(AsyncListChunksRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::grpcfiledemo::Content>> PrepareAsyncListChunks(::grpc::ClientContext* context, const ::grpcfiledemo::Content& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::grpcfiledemo::Content>>(PrepareAsyncListChunksRaw(context, request, cq));
    }
    // A client-to-server streaming RPC.
    //
    // Accepts a stream of Points on a route being traversed, returning a
    // RouteSummary when traversal is completed.
    std::unique_ptr< ::grpc::ClientWriterInterface< ::grpcfiledemo::Point>> RecordRoute(::grpc::ClientContext* context, ::grpcfiledemo::RouteSummary* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::grpcfiledemo::Point>>(RecordRouteRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::grpcfiledemo::Point>> AsyncRecordRoute(::grpc::ClientContext* context, ::grpcfiledemo::RouteSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::grpcfiledemo::Point>>(AsyncRecordRouteRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::grpcfiledemo::Point>> PrepareAsyncRecordRoute(::grpc::ClientContext* context, ::grpcfiledemo::RouteSummary* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::grpcfiledemo::Point>>(PrepareAsyncRecordRouteRaw(context, response, cq));
    }
    // A Bidirectional streaming RPC.
    //
    // Accepts a stream of RouteNotes sent while a route is being traversed,
    // while receiving other RouteNotes (e.g. from other users).
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::grpcfiledemo::RouteNote, ::grpcfiledemo::RouteNote>> RouteChat(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::grpcfiledemo::RouteNote, ::grpcfiledemo::RouteNote>>(RouteChatRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpcfiledemo::RouteNote, ::grpcfiledemo::RouteNote>> AsyncRouteChat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpcfiledemo::RouteNote, ::grpcfiledemo::RouteNote>>(AsyncRouteChatRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpcfiledemo::RouteNote, ::grpcfiledemo::RouteNote>> PrepareAsyncRouteChat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpcfiledemo::RouteNote, ::grpcfiledemo::RouteNote>>(PrepareAsyncRouteChatRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::grpcfiledemo::Content, ::grpcfiledemo::Content>> ChunkChat(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::grpcfiledemo::Content, ::grpcfiledemo::Content>>(ChunkChatRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpcfiledemo::Content, ::grpcfiledemo::Content>> AsyncChunkChat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpcfiledemo::Content, ::grpcfiledemo::Content>>(AsyncChunkChatRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpcfiledemo::Content, ::grpcfiledemo::Content>> PrepareAsyncChunkChat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpcfiledemo::Content, ::grpcfiledemo::Content>>(PrepareAsyncChunkChatRaw(context, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcfiledemo::Feature>* AsyncGetFeatureRaw(::grpc::ClientContext* context, const ::grpcfiledemo::Point& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcfiledemo::Feature>* PrepareAsyncGetFeatureRaw(::grpc::ClientContext* context, const ::grpcfiledemo::Point& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::grpcfiledemo::Feature>* ListFeaturesRaw(::grpc::ClientContext* context, const ::grpcfiledemo::Rectangle& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::grpcfiledemo::Feature>* AsyncListFeaturesRaw(::grpc::ClientContext* context, const ::grpcfiledemo::Rectangle& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::grpcfiledemo::Feature>* PrepareAsyncListFeaturesRaw(::grpc::ClientContext* context, const ::grpcfiledemo::Rectangle& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::grpcfiledemo::Content>* ListChunksRaw(::grpc::ClientContext* context, const ::grpcfiledemo::Content& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::grpcfiledemo::Content>* AsyncListChunksRaw(::grpc::ClientContext* context, const ::grpcfiledemo::Content& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::grpcfiledemo::Content>* PrepareAsyncListChunksRaw(::grpc::ClientContext* context, const ::grpcfiledemo::Content& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::grpcfiledemo::Point>* RecordRouteRaw(::grpc::ClientContext* context, ::grpcfiledemo::RouteSummary* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::grpcfiledemo::Point>* AsyncRecordRouteRaw(::grpc::ClientContext* context, ::grpcfiledemo::RouteSummary* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::grpcfiledemo::Point>* PrepareAsyncRecordRouteRaw(::grpc::ClientContext* context, ::grpcfiledemo::RouteSummary* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::grpcfiledemo::RouteNote, ::grpcfiledemo::RouteNote>* RouteChatRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::grpcfiledemo::RouteNote, ::grpcfiledemo::RouteNote>* AsyncRouteChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::grpcfiledemo::RouteNote, ::grpcfiledemo::RouteNote>* PrepareAsyncRouteChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::grpcfiledemo::Content, ::grpcfiledemo::Content>* ChunkChatRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::grpcfiledemo::Content, ::grpcfiledemo::Content>* AsyncChunkChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::grpcfiledemo::Content, ::grpcfiledemo::Content>* PrepareAsyncChunkChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetFeature(::grpc::ClientContext* context, const ::grpcfiledemo::Point& request, ::grpcfiledemo::Feature* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcfiledemo::Feature>> AsyncGetFeature(::grpc::ClientContext* context, const ::grpcfiledemo::Point& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcfiledemo::Feature>>(AsyncGetFeatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcfiledemo::Feature>> PrepareAsyncGetFeature(::grpc::ClientContext* context, const ::grpcfiledemo::Point& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcfiledemo::Feature>>(PrepareAsyncGetFeatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::grpcfiledemo::Feature>> ListFeatures(::grpc::ClientContext* context, const ::grpcfiledemo::Rectangle& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::grpcfiledemo::Feature>>(ListFeaturesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::grpcfiledemo::Feature>> AsyncListFeatures(::grpc::ClientContext* context, const ::grpcfiledemo::Rectangle& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::grpcfiledemo::Feature>>(AsyncListFeaturesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::grpcfiledemo::Feature>> PrepareAsyncListFeatures(::grpc::ClientContext* context, const ::grpcfiledemo::Rectangle& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::grpcfiledemo::Feature>>(PrepareAsyncListFeaturesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::grpcfiledemo::Content>> ListChunks(::grpc::ClientContext* context, const ::grpcfiledemo::Content& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::grpcfiledemo::Content>>(ListChunksRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::grpcfiledemo::Content>> AsyncListChunks(::grpc::ClientContext* context, const ::grpcfiledemo::Content& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::grpcfiledemo::Content>>(AsyncListChunksRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::grpcfiledemo::Content>> PrepareAsyncListChunks(::grpc::ClientContext* context, const ::grpcfiledemo::Content& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::grpcfiledemo::Content>>(PrepareAsyncListChunksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::grpcfiledemo::Point>> RecordRoute(::grpc::ClientContext* context, ::grpcfiledemo::RouteSummary* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::grpcfiledemo::Point>>(RecordRouteRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::grpcfiledemo::Point>> AsyncRecordRoute(::grpc::ClientContext* context, ::grpcfiledemo::RouteSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::grpcfiledemo::Point>>(AsyncRecordRouteRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::grpcfiledemo::Point>> PrepareAsyncRecordRoute(::grpc::ClientContext* context, ::grpcfiledemo::RouteSummary* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::grpcfiledemo::Point>>(PrepareAsyncRecordRouteRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::grpcfiledemo::RouteNote, ::grpcfiledemo::RouteNote>> RouteChat(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::grpcfiledemo::RouteNote, ::grpcfiledemo::RouteNote>>(RouteChatRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::grpcfiledemo::RouteNote, ::grpcfiledemo::RouteNote>> AsyncRouteChat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::grpcfiledemo::RouteNote, ::grpcfiledemo::RouteNote>>(AsyncRouteChatRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::grpcfiledemo::RouteNote, ::grpcfiledemo::RouteNote>> PrepareAsyncRouteChat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::grpcfiledemo::RouteNote, ::grpcfiledemo::RouteNote>>(PrepareAsyncRouteChatRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::grpcfiledemo::Content, ::grpcfiledemo::Content>> ChunkChat(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::grpcfiledemo::Content, ::grpcfiledemo::Content>>(ChunkChatRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::grpcfiledemo::Content, ::grpcfiledemo::Content>> AsyncChunkChat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::grpcfiledemo::Content, ::grpcfiledemo::Content>>(AsyncChunkChatRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::grpcfiledemo::Content, ::grpcfiledemo::Content>> PrepareAsyncChunkChat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::grpcfiledemo::Content, ::grpcfiledemo::Content>>(PrepareAsyncChunkChatRaw(context, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::grpcfiledemo::Feature>* AsyncGetFeatureRaw(::grpc::ClientContext* context, const ::grpcfiledemo::Point& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcfiledemo::Feature>* PrepareAsyncGetFeatureRaw(::grpc::ClientContext* context, const ::grpcfiledemo::Point& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::grpcfiledemo::Feature>* ListFeaturesRaw(::grpc::ClientContext* context, const ::grpcfiledemo::Rectangle& request) override;
    ::grpc::ClientAsyncReader< ::grpcfiledemo::Feature>* AsyncListFeaturesRaw(::grpc::ClientContext* context, const ::grpcfiledemo::Rectangle& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::grpcfiledemo::Feature>* PrepareAsyncListFeaturesRaw(::grpc::ClientContext* context, const ::grpcfiledemo::Rectangle& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::grpcfiledemo::Content>* ListChunksRaw(::grpc::ClientContext* context, const ::grpcfiledemo::Content& request) override;
    ::grpc::ClientAsyncReader< ::grpcfiledemo::Content>* AsyncListChunksRaw(::grpc::ClientContext* context, const ::grpcfiledemo::Content& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::grpcfiledemo::Content>* PrepareAsyncListChunksRaw(::grpc::ClientContext* context, const ::grpcfiledemo::Content& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::grpcfiledemo::Point>* RecordRouteRaw(::grpc::ClientContext* context, ::grpcfiledemo::RouteSummary* response) override;
    ::grpc::ClientAsyncWriter< ::grpcfiledemo::Point>* AsyncRecordRouteRaw(::grpc::ClientContext* context, ::grpcfiledemo::RouteSummary* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::grpcfiledemo::Point>* PrepareAsyncRecordRouteRaw(::grpc::ClientContext* context, ::grpcfiledemo::RouteSummary* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::grpcfiledemo::RouteNote, ::grpcfiledemo::RouteNote>* RouteChatRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::grpcfiledemo::RouteNote, ::grpcfiledemo::RouteNote>* AsyncRouteChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::grpcfiledemo::RouteNote, ::grpcfiledemo::RouteNote>* PrepareAsyncRouteChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::grpcfiledemo::Content, ::grpcfiledemo::Content>* ChunkChatRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::grpcfiledemo::Content, ::grpcfiledemo::Content>* AsyncChunkChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::grpcfiledemo::Content, ::grpcfiledemo::Content>* PrepareAsyncChunkChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetFeature_;
    const ::grpc::internal::RpcMethod rpcmethod_ListFeatures_;
    const ::grpc::internal::RpcMethod rpcmethod_ListChunks_;
    const ::grpc::internal::RpcMethod rpcmethod_RecordRoute_;
    const ::grpc::internal::RpcMethod rpcmethod_RouteChat_;
    const ::grpc::internal::RpcMethod rpcmethod_ChunkChat_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // A simple RPC.
    //
    // Obtains the feature at a given position.
    //
    // A feature with an empty name is returned if there's no feature at the given
    // position.
    virtual ::grpc::Status GetFeature(::grpc::ServerContext* context, const ::grpcfiledemo::Point* request, ::grpcfiledemo::Feature* response);
    // A server-to-client streaming RPC.
    //
    // Obtains the Features available within the given Rectangle.  Results are
    // streamed rather than returned at once (e.g. in a response message with a
    // repeated field), as the rectangle may cover a large area and contain a
    // huge number of features.
    virtual ::grpc::Status ListFeatures(::grpc::ServerContext* context, const ::grpcfiledemo::Rectangle* request, ::grpc::ServerWriter< ::grpcfiledemo::Feature>* writer);
    virtual ::grpc::Status ListChunks(::grpc::ServerContext* context, const ::grpcfiledemo::Content* request, ::grpc::ServerWriter< ::grpcfiledemo::Content>* writer);
    // A client-to-server streaming RPC.
    //
    // Accepts a stream of Points on a route being traversed, returning a
    // RouteSummary when traversal is completed.
    virtual ::grpc::Status RecordRoute(::grpc::ServerContext* context, ::grpc::ServerReader< ::grpcfiledemo::Point>* reader, ::grpcfiledemo::RouteSummary* response);
    // A Bidirectional streaming RPC.
    //
    // Accepts a stream of RouteNotes sent while a route is being traversed,
    // while receiving other RouteNotes (e.g. from other users).
    virtual ::grpc::Status RouteChat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpcfiledemo::RouteNote, ::grpcfiledemo::RouteNote>* stream);
    virtual ::grpc::Status ChunkChat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpcfiledemo::Content, ::grpcfiledemo::Content>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetFeature() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFeature(::grpc::ServerContext* context, const ::grpcfiledemo::Point* request, ::grpcfiledemo::Feature* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFeature(::grpc::ServerContext* context, ::grpcfiledemo::Point* request, ::grpc::ServerAsyncResponseWriter< ::grpcfiledemo::Feature>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListFeatures() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFeatures(::grpc::ServerContext* context, const ::grpcfiledemo::Rectangle* request, ::grpc::ServerWriter< ::grpcfiledemo::Feature>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListFeatures(::grpc::ServerContext* context, ::grpcfiledemo::Rectangle* request, ::grpc::ServerAsyncWriter< ::grpcfiledemo::Feature>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListChunks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListChunks() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListChunks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListChunks(::grpc::ServerContext* context, const ::grpcfiledemo::Content* request, ::grpc::ServerWriter< ::grpcfiledemo::Content>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListChunks(::grpc::ServerContext* context, ::grpcfiledemo::Content* request, ::grpc::ServerAsyncWriter< ::grpcfiledemo::Content>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RecordRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RecordRoute() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RecordRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordRoute(::grpc::ServerContext* context, ::grpc::ServerReader< ::grpcfiledemo::Point>* reader, ::grpcfiledemo::RouteSummary* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordRoute(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpcfiledemo::RouteSummary, ::grpcfiledemo::Point>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(3, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RouteChat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RouteChat() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RouteChat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RouteChat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpcfiledemo::RouteNote, ::grpcfiledemo::RouteNote>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRouteChat(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpcfiledemo::RouteNote, ::grpcfiledemo::RouteNote>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ChunkChat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ChunkChat() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ChunkChat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChunkChat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpcfiledemo::Content, ::grpcfiledemo::Content>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChunkChat(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpcfiledemo::Content, ::grpcfiledemo::Content>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(5, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetFeature<WithAsyncMethod_ListFeatures<WithAsyncMethod_ListChunks<WithAsyncMethod_RecordRoute<WithAsyncMethod_RouteChat<WithAsyncMethod_ChunkChat<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetFeature() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFeature(::grpc::ServerContext* context, const ::grpcfiledemo::Point* request, ::grpcfiledemo::Feature* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListFeatures() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFeatures(::grpc::ServerContext* context, const ::grpcfiledemo::Rectangle* request, ::grpc::ServerWriter< ::grpcfiledemo::Feature>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListChunks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListChunks() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListChunks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListChunks(::grpc::ServerContext* context, const ::grpcfiledemo::Content* request, ::grpc::ServerWriter< ::grpcfiledemo::Content>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RecordRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RecordRoute() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RecordRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordRoute(::grpc::ServerContext* context, ::grpc::ServerReader< ::grpcfiledemo::Point>* reader, ::grpcfiledemo::RouteSummary* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RouteChat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RouteChat() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RouteChat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RouteChat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpcfiledemo::RouteNote, ::grpcfiledemo::RouteNote>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ChunkChat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ChunkChat() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ChunkChat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChunkChat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpcfiledemo::Content, ::grpcfiledemo::Content>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetFeature() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::grpcfiledemo::Point, ::grpcfiledemo::Feature>(std::bind(&WithStreamedUnaryMethod_GetFeature<BaseClass>::StreamedGetFeature, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFeature(::grpc::ServerContext* context, const ::grpcfiledemo::Point* request, ::grpcfiledemo::Feature* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFeature(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcfiledemo::Point,::grpcfiledemo::Feature>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetFeature<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ListFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_ListFeatures() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::grpcfiledemo::Rectangle, ::grpcfiledemo::Feature>(std::bind(&WithSplitStreamingMethod_ListFeatures<BaseClass>::StreamedListFeatures, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_ListFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListFeatures(::grpc::ServerContext* context, const ::grpcfiledemo::Rectangle* request, ::grpc::ServerWriter< ::grpcfiledemo::Feature>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedListFeatures(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::grpcfiledemo::Rectangle,::grpcfiledemo::Feature>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_ListChunks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_ListChunks() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::grpcfiledemo::Content, ::grpcfiledemo::Content>(std::bind(&WithSplitStreamingMethod_ListChunks<BaseClass>::StreamedListChunks, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_ListChunks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListChunks(::grpc::ServerContext* context, const ::grpcfiledemo::Content* request, ::grpc::ServerWriter< ::grpcfiledemo::Content>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedListChunks(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::grpcfiledemo::Content,::grpcfiledemo::Content>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ListFeatures<WithSplitStreamingMethod_ListChunks<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetFeature<WithSplitStreamingMethod_ListFeatures<WithSplitStreamingMethod_ListChunks<Service > > > StreamedService;
};

}  // namespace grpcfiledemo


#endif  // GRPC_route_5fguide_2eproto__INCLUDED
